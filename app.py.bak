from flask import Flask, render_template, request, redirect, url_for, flash, session, jsonify, g, send_file, send_from_directory, Response
from flask_bcrypt import Bcrypt
import os
import sqlite3
from datetime import datetime
import csv
from io import StringIO, BytesIO
try:
    import openpyxl
except Exception:
    openpyxl = None
from werkzeug.utils import secure_filename
from weasyprint import HTML, CSS

# Imaging & codes
from PIL import Image, ImageDraw, ImageFont
from barcode import EAN13
from barcode.writer import ImageWriter
import qrcode
import math
import json
import zipfile

# Optional: human-friendly number to words
try:
    from num2words import num2words
except Exception:
    num2words = None

DB_PATH = os.path.join(os.path.dirname(__file__), 'crm.db')

app = Flask(__name__)
# Static folder for item images
UPLOAD_FOLDER = os.path.join(os.path.dirname(__file__), 'static', 'uploads')
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
app.secret_key = os.urandom(24)  # For session management
bcrypt = Bcrypt(app)

# Configure JSON provider to handle sqlite3.Row objects globally
from flask.json.provider import DefaultJSONProvider

class SqliteRowJSONProvider(DefaultJSONProvider):
    def default(self, o):
        # Convert sqlite3.Row to dict for JSON serialization
        if isinstance(o, sqlite3.Row):
            return dict(o)
        return super().default(o)

app.json_provider_class = SqliteRowJSONProvider
app.json = app.json_provider_class(app)

# ----------------------
# Jinja filter: Amount in words (Indian numbering)
# ----------------------

def _inr_number_to_words(n: int) -> str:
    ones = ["zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine",
            "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"]
    tens = ["", "", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"]

    def two_digits(num):
        if num < 20:
            return ones[num]
        t, o = divmod(num, 10)
        return (tens[t] + (" " + ones[o] if o else "")).strip()

    def three_digits(num):
        h, rem = divmod(num, 100)
        parts = []
        if h:
            parts.append(ones[h] + " hundred")
        if rem:
            parts.append(two_digits(rem))
        return " ".join(parts) if parts else "zero"

    if n == 0:
        return "zero"

    parts = []
    crore, rem = divmod(n, 10_000_000)
    if crore:
        parts.append(_inr_number_to_words(crore) + " crore")
    lakh, rem = divmod(rem, 100_000)
    if lakh:
        parts.append(_inr_number_to_words(lakh) + " lakh")
    thousand, rem = divmod(rem, 1000)
    if thousand:
        parts.append(_inr_number_to_words(thousand) + " thousand")
    if rem:
        parts.append(three_digits(rem))

    return " ".join(parts)


def inr_words(amount) -> str:
    try:
        n = round(float(amount or 0), 2)
    except Exception:
        n = 0.0
    rupees = int(n)
    paise = int(round((n - rupees) * 100))

    if num2words:
        # Use library if available (en_IN style, currency-like phrasing)
        try:
            words = num2words(rupees, lang='en_IN').replace('-', ' ') + " rupees"
            if paise:
                words += " and " + num2words(paise, lang='en_IN').replace('-', ' ') + " paise"
            return words + " only"
        except Exception:
            pass

    # Fallback to lightweight implementation
    words = _inr_number_to_words(rupees) + " rupees"
    if paise:
        words += " and " + _inr_number_to_words(paise) + " paise"
    words += " only"
    return words

# register filter for templates
app.jinja_env.filters['inr_words'] = inr_words

# ----------------------
# Database helpers
# ----------------------

def get_db():
    if 'db' not in g:
        g.db = sqlite3.connect(DB_PATH)
        g.db.row_factory = sqlite3.Row
    return g.db

@app.teardown_appcontext
def close_db(exception):
    db = g.pop('db', None)
    if db is not None:
        db.close()


def init_db():
    db = get_db()

    # Users
    db.execute(
        """
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            email TEXT NOT NULL UNIQUE,
            password_hash TEXT NOT NULL,
            created_at TEXT DEFAULT CURRENT_TIMESTAMP
        );
        """
    )

    # Customers
    db.execute(
        """
        CREATE TABLE IF NOT EXISTS customers (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            email TEXT,
            mobile TEXT,
            phone TEXT,
            address TEXT,
            city TEXT,
            pincode TEXT,
            state TEXT,
            country TEXT,
            notes TEXT,
            status TEXT DEFAULT 'active',
            created_at TEXT DEFAULT CURRENT_TIMESTAMP,
            updated_at TEXT DEFAULT CURRENT_TIMESTAMP
        );
        """
    )

    # Leads
    db.execute(
        """
        CREATE TABLE IF NOT EXISTS leads (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            email TEXT,
            mobile TEXT,
            phone TEXT,
            source TEXT,
            status TEXT DEFAULT 'new',
            notes TEXT,
            customer_id INTEGER,
            created_at TEXT DEFAULT CURRENT_TIMESTAMP,
            updated_at TEXT DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY(customer_id) REFERENCES customers(id)
        );
        """
    )

    # Opportunities
    db.execute(
        """
        CREATE TABLE IF NOT EXISTS opportunities (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT NOT NULL,
            amount REAL,
            stage TEXT DEFAULT 'prospecting',
            status TEXT DEFAULT 'open',
            customer_id INTEGER,
            lead_id INTEGER,
            notes TEXT,
            close_date TEXT,
            created_at TEXT DEFAULT CURRENT_TIMESTAMP,
            updated_at TEXT DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY(customer_id) REFERENCES customers(id),
            FOREIGN KEY(lead_id) REFERENCES leads(id)
        );
        """
    )

    # Inventory Items
    db.execute(
        """
        CREATE TABLE IF NOT EXISTS items (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            sku TEXT UNIQUE,
            name TEXT NOT NULL,
            description TEXT,
            uom TEXT DEFAULT 'Nos',
            cost_price REAL DEFAULT 0,
            selling_price REAL DEFAULT 0,
            stock_qty REAL DEFAULT 0,
            reorder_level REAL DEFAULT 0,
            hsn_code TEXT,
            gst_rate REAL DEFAULT 0,
            discount REAL DEFAULT 0,
            supplier_name TEXT,
            brand TEXT,
            image_path TEXT,
            status TEXT DEFAULT 'active',
            created_at TEXT DEFAULT CURRENT_TIMESTAMP,
            updated_at TEXT DEFAULT CURRENT_TIMESTAMP
        );
        """
    )

    # Suppliers
    db.execute(
        """
        CREATE TABLE IF NOT EXISTS suppliers (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            email TEXT,
            phone TEXT,
            address TEXT,
            gstin TEXT,
            status TEXT DEFAULT 'active',
            created_at TEXT DEFAULT CURRENT_TIMESTAMP,
            updated_at TEXT DEFAULT CURRENT_TIMESTAMP
        );
        """
    )

    # Migration-lite: add supplier columns if missing
    try:
        cols = db.execute('PRAGMA table_info(suppliers)').fetchall()
        names = {c['name'] for c in cols}
        if 'city' not in names:
            db.execute("ALTER TABLE suppliers ADD COLUMN city TEXT")
        if 'pincode' not in names:
            db.execute("ALTER TABLE suppliers ADD COLUMN pincode TEXT")
        if 'state' not in names:
            db.execute("ALTER TABLE suppliers ADD COLUMN state TEXT")
        if 'gst_type' not in names:
            db.execute("ALTER TABLE suppliers ADD COLUMN gst_type TEXT DEFAULT 'regular'")
        if 'contact_person' not in names:
            db.execute("ALTER TABLE suppliers ADD COLUMN contact_person TEXT")
        if 'mobile' not in names:
            db.execute("ALTER TABLE suppliers ADD COLUMN mobile TEXT")
    except Exception:
        pass

    # Ensure items table has required columns (migration-lite)
    try:
        cols = db.execute('PRAGMA table_info(items)').fetchall()
        names = {c['name'] for c in cols}
        # Core numeric columns used across the app
        if 'cost_price' not in names:
            db.execute("ALTER TABLE items ADD COLUMN cost_price REAL DEFAULT 0")
        if 'selling_price' not in names:
            db.execute("ALTER TABLE items ADD COLUMN selling_price REAL DEFAULT 0")
        if 'stock_qty' not in names:
            db.execute("ALTER TABLE items ADD COLUMN stock_qty REAL DEFAULT 0")
        if 'reorder_level' not in names:
            db.execute("ALTER TABLE items ADD COLUMN reorder_level REAL DEFAULT 0")
        # Other columns referenced by routes/APIs
        if 'uom' not in names:
            db.execute("ALTER TABLE items ADD COLUMN uom TEXT DEFAULT 'Nos'")
        if 'hsn_code' not in names:
            db.execute("ALTER TABLE items ADD COLUMN hsn_code TEXT")
        if 'gst_rate' not in names:
            db.execute("ALTER TABLE items ADD COLUMN gst_rate REAL DEFAULT 0")
        if 'discount' not in names:
            db.execute("ALTER TABLE items ADD COLUMN discount REAL DEFAULT 0")
        if 'supplier_id' not in names:
            db.execute("ALTER TABLE items ADD COLUMN supplier_id INTEGER")
        if 'supplier_name' not in names:
            db.execute("ALTER TABLE items ADD COLUMN supplier_name TEXT")
        if 'brand' not in names:
            db.execute("ALTER TABLE items ADD COLUMN brand TEXT")
        if 'image_path' not in names:
            db.execute("ALTER TABLE items ADD COLUMN image_path TEXT")
        if 'status' not in names:
            db.execute("ALTER TABLE items ADD COLUMN status TEXT DEFAULT 'active'")
        if 'ean13' not in names:
            db.execute("ALTER TABLE items ADD COLUMN ean13 TEXT")
    except Exception as e:
        try:
            print('Item table migration check error:', e)
        except Exception:
            pass

    # Stock Moves (audit trail)
    db.execute(
        """
        CREATE TABLE IF NOT EXISTS stock_moves (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            item_id INTEGER NOT NULL,
            move_type TEXT NOT NULL CHECK (move_type IN ('IN','OUT')),
            qty REAL NOT NULL,
            reference TEXT,
            reference_id INTEGER,
            notes TEXT,
            created_at TEXT DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY(item_id) REFERENCES items(id)
        );
        """
    )

    # Purchases (basic - kept for compatibility)
    db.execute(
        """
        CREATE TABLE IF NOT EXISTS purchases (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            supplier_id INTEGER NOT NULL,
            date TEXT,
            bill_no TEXT,
            notes TEXT,
            total REAL DEFAULT 0,
            tax_total REAL DEFAULT 0,
            grand_total REAL DEFAULT 0,
            created_at TEXT DEFAULT CURRENT_TIMESTAMP,
            updated_at TEXT DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY(supplier_id) REFERENCES suppliers(id)
        );
        """
    )
    db.execute(
        """
        CREATE TABLE IF NOT EXISTS purchase_items (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            purchase_id INTEGER NOT NULL,
            item_id INTEGER NOT NULL,
            qty REAL NOT NULL,
            rate REAL NOT NULL,
            discount REAL DEFAULT 0,
            gst_rate REAL DEFAULT 0,
            line_total REAL DEFAULT 0,
            FOREIGN KEY(purchase_id) REFERENCES purchases(id),
            FOREIGN KEY(item_id) REFERENCES items(id)
        );
        """
    )

    # Payments (Customer receipts)
    db.execute(
        """
        CREATE TABLE IF NOT EXISTS payments (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            invoice_id INTEGER NOT NULL,
            date TEXT,
            mode TEXT,
            reference TEXT,
            amount REAL NOT NULL,
            notes TEXT,
            created_at TEXT DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY(invoice_id) REFERENCES sales_invoices(id)
        );
        """
    )

    # Supplier Payments (Payables against purchase invoices)
    db.execute(
        """
        CREATE TABLE IF NOT EXISTS supplier_payments (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            purchase_invoice_id INTEGER NOT NULL,
            date TEXT,
            mode TEXT,
            reference TEXT,
            amount REAL NOT NULL,
            notes TEXT,
            created_at TEXT DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY(purchase_invoice_id) REFERENCES purchase_invoices(id)
        );
        """
    )

    # Sales Invoices
    db.execute(
        """
        CREATE TABLE IF NOT EXISTS sales_invoices (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            si_no TEXT UNIQUE,
            customer_id INTEGER NOT NULL,
            date TEXT,
            notes TEXT,
            total REAL DEFAULT 0,
            tax_total REAL DEFAULT 0,
            grand_total REAL DEFAULT 0,
            status TEXT DEFAULT 'draft',
            created_at TEXT DEFAULT CURRENT_TIMESTAMP,
            updated_at TEXT DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY(customer_id) REFERENCES customers(id)
        );
        """
    )
    db.execute(
        """
        CREATE TABLE IF NOT EXISTS sales_invoice_items (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            invoice_id INTEGER NOT NULL,
            item_id INTEGER NOT NULL,
            qty REAL NOT NULL,
            rate REAL NOT NULL,
            discount REAL DEFAULT 0,
            gst_rate REAL DEFAULT 0,
            line_total REAL DEFAULT 0,
            FOREIGN KEY(invoice_id) REFERENCES sales_invoices(id),
            FOREIGN KEY(item_id) REFERENCES items(id)
        );
        """
    )

    # Purchase Invoices
    db.execute(
        """
        CREATE TABLE IF NOT EXISTS purchase_invoices (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            pi_no TEXT UNIQUE,
            supplier_id INTEGER NOT NULL,
            date TEXT,
            bill_no TEXT,
            notes TEXT,
            total REAL DEFAULT 0,
            tax_total REAL DEFAULT 0,
            grand_total REAL DEFAULT 0,
            status TEXT DEFAULT 'draft',
            created_at TEXT DEFAULT CURRENT_TIMESTAMP,
            updated_at TEXT DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY(supplier_id) REFERENCES suppliers(id)
        );
        """
    )
    db.execute(
        """
        CREATE TABLE IF NOT EXISTS purchase_invoice_items (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            invoice_id INTEGER NOT NULL,
            item_id INTEGER NOT NULL,
            qty REAL NOT NULL,
            rate REAL NOT NULL,
            discount REAL DEFAULT 0,
            gst_rate REAL DEFAULT 0,
            line_total REAL DEFAULT 0,
            FOREIGN KEY(invoice_id) REFERENCES purchase_invoices(id),
            FOREIGN KEY(item_id) REFERENCES items(id)
        );
        """
    )

    # Settings
    db.execute(
        """
        CREATE TABLE IF NOT EXISTS settings (
            key TEXT PRIMARY KEY,
            value TEXT,
            updated_at TEXT DEFAULT CURRENT_TIMESTAMP
        );
        """
    )

    # Add default user if none exists
    if not db.execute("SELECT id FROM users").fetchone():
        db.execute(
            "INSERT INTO users (name, email, password_hash) VALUES (?, ?, ?)",
            ("Admin User", "user@example.com", bcrypt.generate_password_hash("password123").decode("utf-8")),
        )
        db.commit()

# ----------------------
# Auth, session, user
# ----------------------

from functools import wraps

def login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user_id' not in session:
            flash('Please log in to access this page.', 'warning')
            return redirect(url_for('login'))
        return f(*args, **kwargs)
    return decorated_function

@app.before_request
def load_logged_in_user():
    user_id = session.get('user_id')
    if user_id is None:
        g.user = None
    else:
        db = get_db()
        g.user = db.execute('SELECT * FROM users WHERE id = ?', (user_id,)).fetchone()

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        email = request.form['email']
        password = request.form['password']
        db = get_db()
        user = db.execute('SELECT * FROM users WHERE email = ?', (email,)).fetchone()
        if user and bcrypt.check_password_hash(user['password_hash'], password):
            session.clear()
            session['user_id'] = user['id']
            session['user_name'] = user['name']
            flash('Logged in successfully!', 'success')
            return redirect(url_for('dashboard'))
        else:
            flash('Invalid email or password', 'error')
    return render_template('login.html')

@app.route('/logout')
def logout():
    session.clear()
    flash('You have been logged out.', 'info')
    return redirect(url_for('login'))

# ----------------------
# Core routes
# ----------------------

@app.route('/')
@login_required
def dashboard():
    db = get_db()
    # Basic stats
    stats = {
        'customers': db.execute('SELECT COUNT(*) FROM customers').fetchone()[0],
        'leads': db.execute('SELECT COUNT(*) FROM leads WHERE status = "new"').fetchone()[0],
        'opportunities': db.execute('SELECT COUNT(*) FROM opportunities WHERE status = "open"').fetchone()[0],
        'sales_total': db.execute('SELECT SUM(grand_total) FROM sales_invoices WHERE status = "submitted"').fetchone()[0] or 0
    }
    # Recent sales
    recent_sales = db.execute('''
        SELECT si.id, si.si_no, si.grand_total, c.name as customer_name, si.date
        FROM sales_invoices si JOIN customers c ON si.customer_id = c.id
        WHERE si.status = "submitted"
        ORDER BY si.date DESC, si.id DESC LIMIT 5
    ''').fetchall()
    return render_template('dashboard.html', stats=stats, recent_sales=recent_sales)

# ----------------------
# /api/customers: Get all customers
# ----------------------
@app.route('/api/customers', methods=['GET'])
@login_required
def api_customers():
    db = get_db()
    customers = db.execute('SELECT id, name, mobile, email FROM customers ORDER BY name').fetchall()
    return jsonify(customers)

# ----------------------
# /api/items/search: Search for items by SKU or name, used by searchable selects
# ----------------------
@app.route('/api/items/search', methods=['GET'])
@login_required
def api_items_search():
    q = request.args.get('q', '').strip()
    limit = request.args.get('limit', 20, type=int)
    
    db = get_db()
    
    # Build query dynamically
    query = "SELECT id, sku, name, selling_price, stock_qty, uom, discount FROM items WHERE status = 'active'"
    params = []
    
    if q:
        # Search in name, sku, description, brand
        query += " AND (name LIKE ? OR sku LIKE ? OR description LIKE ? OR brand LIKE ?)"
        search_term = f"%{q}%"
        params.extend([search_term, search_term, search_term, search_term])
        
    query += " ORDER BY name LIMIT ?"
    params.append(limit)
    
    items = db.execute(query, params).fetchall()
    
    return jsonify(items)

# ----------------------
# /items: List all inventory items, and handle creation of new items
# ----------------------
@app.route('/items', methods=['GET', 'POST'])
@login_required
def items_list():
    db = get_db()
    
    if request.method == 'POST':
        # Get data from form, with basic validation/defaults
        sku = request.form.get('sku')
        name = request.form.get('name', '').strip()
        description = request.form.get('description', '').strip()
        uom = request.form.get('uom', 'Nos').strip()
        cost_price = request.form.get('cost_price', 0, type=float)
        selling_price = request.form.get('selling_price', 0, type=float)
        stock_qty = request.form.get('stock_qty', 0, type=float)
        reorder_level = request.form.get('reorder_level', 0, type=float)
        hsn_code = request.form.get('hsn_code', '').strip()
        gst_rate = request.form.get('gst_rate', 0, type=float)
        supplier_name = request.form.get('supplier_name', '').strip()
        brand = request.form.get('brand', '').strip()
        status = request.form.get('status', 'active').strip()

        # Basic validation
        if not name:
            flash('Item name is required.', 'error')
            return redirect(url_for('items_list'))

        # Check for duplicate SKU if provided
        if sku:
            if db.execute('SELECT id FROM items WHERE sku = ?', (sku,)).fetchone():
                flash(f"SKU '{sku}' already exists. Leave it blank for auto-generation or provide a unique one.", 'error')
                return redirect(url_for('items_list'))
        
        try:
            # Insert new item
            cursor = db.execute("""
                INSERT INTO items (sku, name, description, uom, cost_price, selling_price, stock_qty, reorder_level, hsn_code, gst_rate, supplier_name, brand, status, updated_at)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)
            """, (sku, name, description, uom, cost_price, selling_price, stock_qty, reorder_level, hsn_code, gst_rate, supplier_name, brand, status))
            
            # If SKU was empty, generate one based on ID
            if not sku:
                item_id = cursor.lastrowid
                new_sku = f"ITEM{item_id:04d}"
                db.execute('UPDATE items SET sku = ? WHERE id = ?', (new_sku, item_id))

            db.commit()
            flash('Item added successfully!', 'success')
        except sqlite3.IntegrityError:
            flash('An item with this SKU already exists.', 'error')
        except Exception as e:
            flash(f'An error occurred: {e}', 'error')
        
        return redirect(url_for('items_list'))

    # GET request: display list of items
    items = db.execute('SELECT * FROM items ORDER BY name').fetchall()
    return render_template('items/index.html', items=items)

# ----------------------
# Reports
# ----------------------

@app.route('/reports/outstanding')
@login_required
def reports_outstanding():
    db = get_db()
    # Customer outstanding
    cust_outstanding = db.execute('''
        SELECT c.id, c.name, c.mobile,
               SUM(si.grand_total) as total_invoiced,
               COALESCE(SUM(p.amount), 0) as total_paid,
               (SUM(si.grand_total) - COALESCE(SUM(p.amount), 0)) as balance
        FROM customers c
        JOIN sales_invoices si ON c.id = si.customer_id
        LEFT JOIN (SELECT invoice_id, SUM(amount) as amount FROM payments GROUP BY invoice_id) p ON si.id = p.invoice_id
        WHERE si.status = 'submitted'
        GROUP BY c.id
        HAVING balance > 0
        ORDER BY c.name
    ''').fetchall()

    # Supplier outstanding (payables)
    supp_outstanding = db.execute('''
        SELECT s.id, s.name, s.phone,
               SUM(pi.grand_total) as total_invoiced,
               COALESCE(SUM(p.amount), 0) as total_paid,
               (SUM(pi.grand_total) - COALESCE(SUM(p.amount), 0)) as balance
        FROM suppliers s
        JOIN purchase_invoices pi ON s.id = pi.supplier_id
        LEFT JOIN (SELECT purchase_invoice_id, SUM(amount) as amount FROM supplier_payments GROUP BY purchase_invoice_id) p ON pi.id = p.purchase_invoice_id
        WHERE pi.status = 'submitted'
        GROUP BY s.id
        HAVING balance > 0
        ORDER BY s.name
    ''').fetchall()
    
    return render_template('reports/outstanding.html', cust_outstanding=cust_outstanding, supp_outstanding=supp_outstanding)

@app.route('/reports/customer-ledger/')
@login_required
def report_customer_ledger():
    db = get_db()
    customers = db.execute("SELECT id, name FROM customers ORDER BY name").fetchall()
    
    customer_id = request.args.get('customer_id', type=int)
    start_date = request.args.get('start_date')
    end_date = request.args.get('end_date')
    
    ledger = []
    customer_name = None
    
    if customer_id:
        customer = db.execute("SELECT name FROM customers WHERE id = ?", (customer_id,)).fetchone()
        if customer:
            customer_name = customer['name']
            
            # Build query with date filters
            query = """
                SELECT 'invoice' as type, si.date, si.si_no as reference, si.grand_total as debit, 0 as credit
                FROM sales_invoices si
                WHERE si.customer_id = ? AND si.status = 'submitted'
                
                UNION ALL
                
                SELECT 'payment' as type, p.date, p.reference, 0 as debit, p.amount as credit
                FROM payments p
                JOIN sales_invoices si ON p.invoice_id = si.id
                WHERE si.customer_id = ?
            """
            params = [customer_id, customer_id]
            
            if start_date:
                query += " AND date(si.date) >= date(?)"
                params.append(start_date)
            if end_date:
                query += " AND date(si.date) <= date(?)"
                params.append(end_date)
                
            query += " ORDER BY date"
            
            ledger = db.execute(query, params).fetchall()

    return render_template('reports/customer_ledger.html', customers=customers, ledger=ledger, 
                           customer_id=customer_id, customer_name=customer_name,
                           start_date=start_date, end_date=end_date)

@app.route('/reports/supplier-ledger/')
@login_required
def report_supplier_ledger():
    db = get_db()
    suppliers = db.execute("SELECT id, name FROM suppliers ORDER BY name").fetchall()
    
    supplier_id = request.args.get('supplier_id', type=int)
    start_date = request.args.get('start_date')
    end_date = request.args.get('end_date')
    
    ledger = []
    supplier_name = None
    
    if supplier_id:
        supplier = db.execute("SELECT name FROM suppliers WHERE id = ?", (supplier_id,)).fetchone()
        if supplier:
            supplier_name = supplier['name']
            
            query = """
                SELECT 'invoice' as type, pi.date, pi.pi_no as reference, pi.grand_total as debit, 0 as credit
                FROM purchase_invoices pi
                WHERE pi.supplier_id = ? AND pi.status = 'submitted'
                
                UNION ALL
                
                SELECT 'payment' as type, p.date, p.reference, 0 as debit, p.amount as credit
                FROM supplier_payments p
                JOIN purchase_invoices pi ON p.purchase_invoice_id = pi.id
                WHERE pi.supplier_id = ?
            """
            params = [supplier_id, supplier_id]
            
            if start_date:
                query += " AND date(pi.date) >= date(?)"
                params.append(start_date)
            if end_date:
                query += " AND date(pi.date) <= date(?)"
                params.append(end_date)
                
            query += " ORDER BY date"
            
            ledger = db.execute(query, params).fetchall()

    return render_template('reports/supplier_ledger.html', suppliers=suppliers, ledger=ledger, 
                           supplier_id=supplier_id, supplier_name=supplier_name,
                           start_date=start_date, end_date=end_date)

@app.route('/reports/stock-balance/')
@login_required
def report_stock_balance():
    db = get_db()
    items = db.execute("SELECT sku, name, stock_qty, uom, cost_price, selling_price FROM items ORDER BY name").fetchall()
    return render_template('reports/stock_balance.html', items=items)

# ----------------------
# /items: List all inventory items, and handle creation of new items
# ----------------------
@app.route('/items', methods=['GET', 'POST'])
@login_required
def items_list():
    db = get_db()
    
    if request.method == 'POST':
        # Get data from form, with basic validation/defaults
        sku = request.form.get('sku')
        name = request.form.get('name', '').strip()
        description = request.form.get('description', '').strip()
        uom = request.form.get('uom', 'Nos').strip()
        cost_price = request.form.get('cost_price', 0, type=float)
        selling_price = request.form.get('selling_price', 0, type=float)
        stock_qty = request.form.get('stock_qty', 0, type=float)
        reorder_level = request.form.get('reorder_level', 0, type=float)
        hsn_code = request.form.get('hsn_code', '').strip()
        gst_rate = request.form.get('gst_rate', 0, type=float)
        supplier_name = request.form.get('supplier_name', '').strip()
        brand = request.form.get('brand', '').strip()
        status = request.form.get('status', 'active').strip()

        # Basic validation
        if not name:
            flash('Item name is required.', 'error')
            return redirect(url_for('items_list'))

        # Check for duplicate SKU if provided
        if sku:
            if db.execute('SELECT id FROM items WHERE sku = ?', (sku,)).fetchone():
                flash(f"SKU '{sku}' already exists. Leave it blank for auto-generation or provide a unique one.", 'error')
                return redirect(url_for('items_list'))
        
        try:
            # Insert new item
            cursor = db.execute("""
                INSERT INTO items (sku, name, description, uom, cost_price, selling_price, stock_qty, reorder_level, hsn_code, gst_rate, supplier_name, brand, status, updated_at)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)
            """, (sku, name, description, uom, cost_price, selling_price, stock_qty, reorder_level, hsn_code, gst_rate, supplier_name, brand, status))
            
            # If SKU was empty, generate one based on ID
            if not sku:
                item_id = cursor.lastrowid
                new_sku = f"ITEM{item_id:04d}"
                db.execute('UPDATE items SET sku = ? WHERE id = ?', (new_sku, item_id))

            db.commit()
            flash('Item added successfully!', 'success')
        except sqlite3.IntegrityError:
            flash('An item with this SKU already exists.', 'error')
        except Exception as e:
            flash(f'An error occurred: {e}', 'error')
        
        return redirect(url_for('items_list'))

    # GET request: display list of items
    items = db.execute('SELECT * FROM items ORDER BY name').fetchall()
    return render_template('items/index.html', items=items)

# ----------------------
# Reports
# ----------------------

@app.route('/reports/outstanding')
@login_required
def reports_outstanding():
    db = get_db()
    # Customer outstanding
    cust_outstanding = db.execute('''
        SELECT c.id, c.name, c.mobile,
               SUM(si.grand_total) as total_invoiced,
               COALESCE(SUM(p.amount), 0) as total_paid,
               (SUM(si.grand_total) - COALESCE(SUM(p.amount), 0)) as balance
        FROM customers c
        JOIN sales_invoices si ON c.id = si.customer_id
        LEFT JOIN (SELECT invoice_id, SUM(amount) as amount FROM payments GROUP BY invoice_id) p ON si.id = p.invoice_id
        WHERE si.status = 'submitted'
        GROUP BY c.id
        HAVING balance > 0
        ORDER BY c.name
    ''').fetchall()

    # Supplier outstanding (payables)
    supp_outstanding = db.execute('''
        SELECT s.id, s.name, s.phone,
               SUM(pi.grand_total) as total_invoiced,
               COALESCE(SUM(p.amount), 0) as total_paid,
               (SUM(pi.grand_total) - COALESCE(SUM(p.amount), 0)) as balance
        FROM suppliers s
        JOIN purchase_invoices pi ON s.id = pi.supplier_id
        LEFT JOIN (SELECT purchase_invoice_id, SUM(amount) as amount FROM supplier_payments GROUP BY purchase_invoice_id) p ON pi.id = p.purchase_invoice_id
        WHERE pi.status = 'submitted'
        GROUP BY s.id
        HAVING balance > 0
        ORDER BY s.name
    ''').fetchall()
    
    return render_template('reports/outstanding.html', cust_outstanding=cust_outstanding, supp_outstanding=supp_outstanding)

@app.route('/reports/customer-ledger/')
@login_required
def report_customer_ledger():
    db = get_db()
    customers = db.execute("SELECT id, name FROM customers ORDER BY name").fetchall()
    
    customer_id = request.args.get('customer_id', type=int)
    start_date = request.args.get('start_date')
    end_date = request.args.get('end_date')
    
    ledger = []
    customer_name = None
    
    if customer_id:
        customer = db.execute("SELECT name FROM customers WHERE id = ?", (customer_id,)).fetchone()
        if customer:
            customer_name = customer['name']
            
            # Build query with date filters
            query = """
                SELECT 'invoice' as type, si.date, si.si_no as reference, si.grand_total as debit, 0 as credit
                FROM sales_invoices si
                WHERE si.customer_id = ? AND si.status = 'submitted'
                
                UNION ALL
                
                SELECT 'payment' as type, p.date, p.reference, 0 as debit, p.amount as credit
                FROM payments p
                JOIN sales_invoices si ON p.invoice_id = si.id
                WHERE si.customer_id = ?
            """
            params = [customer_id, customer_id]
            
            if start_date:
                query += " AND date(si.date) >= date(?)"
                params.append(start_date)
            if end_date:
                query += " AND date(si.date) <= date(?)"
                params.append(end_date)
                
            query += " ORDER BY date"
            
            ledger = db.execute(query, params).fetchall()

    return render_template('reports/customer_ledger.html', customers=customers, ledger=ledger, 
                           customer_id=customer_id, customer_name=customer_name,
                           start_date=start_date, end_date=end_date)

@app.route('/reports/supplier-ledger/')
@login_required
def report_supplier_ledger():
    db = get_db()
    suppliers = db.execute("SELECT id, name FROM suppliers ORDER BY name").fetchall()
    
    supplier_id = request.args.get('supplier_id', type=int)
    start_date = request.args.get('start_date')
    end_date = request.args.get('end_date')
    
    ledger = []
    supplier_name = None
    
    if supplier_id:
        supplier = db.execute("SELECT name FROM suppliers WHERE id = ?", (supplier_id,)).fetchone()
        if supplier:
            supplier_name = supplier['name']
            
            query = """
                SELECT 'invoice' as type, pi.date, pi.pi_no as reference, pi.grand_total as debit, 0 as credit
                FROM purchase_invoices pi
                WHERE pi.supplier_id = ? AND pi.status = 'submitted'
                
                UNION ALL
                
                SELECT 'payment' as type, p.date, p.reference, 0 as debit, p.amount as credit
                FROM supplier_payments p
                JOIN purchase_invoices pi ON p.purchase_invoice_id = pi.id
                WHERE pi.supplier_id = ?
            """
            params = [supplier_id, supplier_id]
            
            if start_date:
                query += " AND date(pi.date) >= date(?)"
                params.append(start_date)
            if end_date:
                query += " AND date(pi.date) <= date(?)"
                params.append(end_date)
                
            query += " ORDER BY date"
            
            ledger = db.execute(query, params).fetchall()

    return render_template('reports/supplier_ledger.html', suppliers=suppliers, ledger=ledger, 
                           supplier_id=supplier_id, supplier_name=supplier_name,
                           start_date=start_date, end_date=end_date)

@app.route('/reports/stock-balance/')
@login_required
def report_stock_balance():
    db = get_db()
    items = db.execute("SELECT sku, name, stock_qty, uom, cost_price, selling_price FROM items ORDER BY name").fetchall()
    return render_template('reports/stock_balance.html', items=items)

# ----------------------
# /items: List all inventory items, and handle creation of new items
# ----------------------
@app.route('/items', methods=['GET', 'POST'])
@login_required
def items_list():
    db = get_db()
    
    if request.method == 'POST':
        # Get data from form, with basic validation/defaults
        sku = request.form.get('sku')
        name = request.form.get('name', '').strip()
        description = request.form.get('description', '').strip()
        uom = request.form.get('uom', 'Nos').strip()
        cost_price = request.form.get('cost_price', 0, type=float)
        selling_price = request.form.get('selling_price', 0, type=float)
        stock_qty = request.form.get('stock_qty', 0, type=float)
        reorder_level = request.form.get('reorder_level', 0, type=float)
        hsn_code = request.form.get('hsn_code', '').strip()
        gst_rate = request.form.get('gst_rate', 0, type=float)
        supplier_name = request.form.get('supplier_name', '').strip()
        brand = request.form.get('brand', '').strip()
        status = request.form.get('status', 'active').strip()

        # Basic validation
        if not name:
            flash('Item name is required.', 'error')
            return redirect(url_for('items_list'))

        # Check for duplicate SKU if provided
        if sku:
            if db.execute('SELECT id FROM items WHERE sku = ?', (sku,)).fetchone():
                flash(f"SKU '{sku}' already exists. Leave it blank for auto-generation or provide a unique one.", 'error')
                return redirect(url_for('items_list'))
        
        try:
            # Insert new item
            cursor = db.execute("""
                INSERT INTO items (sku, name, description, uom, cost_price, selling_price, stock_qty, reorder_level, hsn_code, gst_rate, supplier_name, brand, status, updated_at)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)
            """, (sku, name, description, uom, cost_price, selling_price, stock_qty, reorder_level, hsn_code, gst_rate, supplier_name, brand, status))
            
            # If SKU was empty, generate one based on ID
            if not sku:
                item_id = cursor.lastrowid
                new_sku = f"ITEM{item_id:04d}"
                db.execute('UPDATE items SET sku = ? WHERE id = ?', (new_sku, item_id))

            db.commit()
            flash('Item added successfully!', 'success')
        except sqlite3.IntegrityError:
            flash('An item with this SKU already exists.', 'error')
        except Exception as e:
            flash(f'An error occurred: {e}', 'error')
        
        return redirect(url_for('items_list'))

    # GET request: display list of items
    items = db.execute('SELECT * FROM items ORDER BY name').fetchall()
    return render_template('items/index.html', items=items)

# ----------------------
# Reports
# ----------------------

@app.route('/reports/outstanding')
@login_required
def reports_outstanding():
    db = get_db()
    # Customer outstanding
    cust_outstanding = db.execute('''
        SELECT c.id, c.name, c.mobile,
               SUM(si.grand_total) as total_invoiced,
               COALESCE(SUM(p.amount), 0) as total_paid,
               (SUM(si.grand_total) - COALESCE(SUM(p.amount), 0)) as balance
        FROM customers c
        JOIN sales_invoices si ON c.id = si.customer_id
        LEFT JOIN (SELECT invoice_id, SUM(amount) as amount FROM payments GROUP BY invoice_id) p ON si.id = p.invoice_id
        WHERE si.status = 'submitted'
        GROUP BY c.id
        HAVING balance > 0
        ORDER BY c.name
    ''').fetchall()

    # Supplier outstanding (payables)
    supp_outstanding = db.execute('''
        SELECT s.id, s.name, s.phone,
               SUM(pi.grand_total) as total_invoiced,
               COALESCE(SUM(p.amount), 0) as total_paid,
               (SUM(pi.grand_total) - COALESCE(SUM(p.amount), 0)) as balance
        FROM suppliers s
        JOIN purchase_invoices pi ON s.id = pi.supplier_id
        LEFT JOIN (SELECT purchase_invoice_id, SUM(amount) as amount FROM supplier_payments GROUP BY purchase_invoice_id) p ON pi.id = p.purchase_invoice_id
        WHERE pi.status = 'submitted'
        GROUP BY s.id
        HAVING balance > 0
        ORDER BY s.name
    ''').fetchall()
    
    return render_template('reports/outstanding.html', cust_outstanding=cust_outstanding, supp_outstanding=supp_outstanding)

@app.route('/reports/customer-ledger/')
@login_required
def report_customer_ledger():
    db = get_db()
    customers = db.execute("SELECT id, name FROM customers ORDER BY name").fetchall()
    
    customer_id = request.args.get('customer_id', type=int)
    start_date = request.args.get('start_date')
    end_date = request.args.get('end_date')
    
    ledger = []
    customer_name = None
    
    if customer_id:
        customer = db.execute("SELECT name FROM customers WHERE id = ?", (customer_id,)).fetchone()
        if customer:
            customer_name = customer['name']
            
            # Build query with date filters
            query = """
                SELECT 'invoice' as type, si.date, si.si_no as reference, si.grand_total as debit, 0 as credit
                FROM sales_invoices si
                WHERE si.customer_id = ? AND si.status = 'submitted'
                
                UNION ALL
                
                SELECT 'payment' as type, p.date, p.reference, 0 as debit, p.amount as credit
                FROM payments p
                JOIN sales_invoices si ON p.invoice_id = si.id
                WHERE si.customer_id = ?
            """
            params = [customer_id, customer_id]
            
            if start_date:
                query += " AND date(si.date) >= date(?)"
                params.append(start_date)
            if end_date:
                query += " AND date(si.date) <= date(?)"
                params.append(end_date)
                
            query += " ORDER BY date"
            
            ledger = db.execute(query, params).fetchall()

    return render_template('reports/customer_ledger.html', customers=customers, ledger=ledger, 
                           customer_id=customer_id, customer_name=customer_name,
                           start_date=start_date, end_date=end_date)

@app.route('/reports/supplier-ledger/')
@login_required
def report_supplier_ledger():
    db = get_db()
    suppliers = db.execute("SELECT id, name FROM suppliers ORDER BY name").fetchall()
    
    supplier_id = request.args.get('supplier_id', type=int)
    start_date = request.args.get('start_date')
    end_date = request.args.get('end_date')
    
    ledger = []
    supplier_name = None
    
    if supplier_id:
        supplier = db.execute("SELECT name FROM suppliers WHERE id = ?", (supplier_id,)).fetchone()
        if supplier:
            supplier_name = supplier['name']
            
            query = """
                SELECT 'invoice' as type, pi.date, pi.pi_no as reference, pi.grand_total as debit, 0 as credit
                FROM purchase_invoices pi
                WHERE pi.supplier_id = ? AND pi.status = 'submitted'
                
                UNION ALL
                
                SELECT 'payment' as type, p.date, p.reference, 0 as debit, p.amount as credit
                FROM supplier_payments p
                JOIN purchase_invoices pi ON p.purchase_invoice_id = pi.id
                WHERE pi.supplier_id = ?
            """
            params = [supplier_id, supplier_id]
            
            if start_date:
                query += " AND date(pi.date) >= date(?)"
                params.append(start_date)
            if end_date:
                query += " AND date(pi.date) <= date(?)"
                params.append(end_date)
                
            query += " ORDER BY date"
            
            ledger = db.execute(query, params).fetchall()

    return render_template('reports/supplier_ledger.html', suppliers=suppliers, ledger=ledger, 
                           supplier_id=supplier_id, supplier_name=supplier_name,
                           start_date=start_date, end_date=end_date)

@app.route('/reports/stock-balance/')
@login_required
def report_stock_balance():
    db = get_db()
    items = db.execute("SELECT sku, name, stock_qty, uom, cost_price, selling_price FROM items ORDER BY name").fetchall()
    return render_template('reports/stock_balance.html', items=items)


@app.route('/items/barcodes', methods=['GET', 'POST'])
@login_required
def item_barcodes():
    if request.method == 'POST':
        item_ids = request.form.getlist('item_ids')
        paper_size = request.form.get('paper_size', 'A4')
        # Further processing to generate barcodes
        if not item_ids:
            flash('Please select items to generate barcodes.', 'warning')
            return redirect(url_for('item_barcodes'))
        
        # For simplicity, redirecting to a placeholder for barcode display
        # In a real app, you would generate a PDF or image here
        flash(f'Generating barcodes for {len(item_ids)} items on {paper_size} paper.', 'success')
        return redirect(url_for('item_barcodes'))

    db = get_db()
    items = db.execute("SELECT id, sku, name, selling_price FROM items ORDER BY name").fetchall()
    return render_template('items/barcodes.html', items=items)

@app.route('/print/customer-ledger/<int:customer_id>')
@login_required
def print_customer_ledger(customer_id):
    db = get_db()
    customer = db.execute("SELECT * FROM customers WHERE id = ?", (customer_id,)).fetchone()
    if not customer:
        return "Customer not found", 404

    start_date = request.args.get('start_date')
    end_date = request.args.get('end_date')

    query = """
        SELECT 'invoice' as type, si.date, si.si_no as reference, si.grand_total as debit, 0 as credit
        FROM sales_invoices si
        WHERE si.customer_id = ? AND si.status = 'submitted'
        UNION ALL
        SELECT 'payment' as type, p.date, p.reference, 0 as debit, p.amount as credit
        FROM payments p
        JOIN sales_invoices si ON p.invoice_id = si.id
        WHERE si.customer_id = ?
    """
    params = [customer_id, customer_id]

    if start_date:
        query += " AND date(si.date) >= date(?)"
        params.append(start_date)
    if end_date:
        query += " AND date(si.date) <= date(?)"
        params.append(end_date)

    query += " ORDER BY date"
    ledger = db.execute(query, params).fetchall()

    rendered_html = render_template('print/customer_ledger.html', customer=customer, ledger=ledger, start_date=start_date, end_date=end_date)
    return Response(
        HTML(string=rendered_html).write_pdf(),
        mimetype='application/pdf',
        headers={'Content-Disposition': 'inline; filename=customer_ledger.pdf'}
    )

@app.route('/print/supplier-ledger/<int:supplier_id>')
@login_required
def print_supplier_ledger(supplier_id):
    db = get_db()
    supplier = db.execute("SELECT * FROM suppliers WHERE id = ?", (supplier_id,)).fetchone()
    if not supplier:
        return "Supplier not found", 404

    start_date = request.args.get('start_date')
    end_date = request.args.get('end_date')

    query = """
        SELECT 'invoice' as type, pi.date, pi.pi_no as reference, pi.grand_total as debit, 0 as credit
        FROM purchase_invoices pi
        WHERE pi.supplier_id = ? AND pi.status = 'submitted'
        UNION ALL
        SELECT 'payment' as type, p.date, p.reference, 0 as debit, p.amount as credit
        FROM supplier_payments p
        JOIN purchase_invoices pi ON p.purchase_invoice_id = pi.id
        WHERE pi.supplier_id = ?
    """
    params = [supplier_id, supplier_id]

    if start_date:
        query += " AND date(pi.date) >= date(?)"
        params.append(start_date)
    if end_date:
        query += " AND date(pi.date) <= date(?)"
        params.append(end_date)

    query += " ORDER BY date"
    ledger = db.execute(query, params).fetchall()

    rendered_html = render_template('print/supplier_ledger.html', supplier=supplier, ledger=ledger, start_date=start_date, end_date=end_date)
    return Response(
        HTML(string=rendered_html).write_pdf(),
        mimetype='application/pdf',
        headers={'Content-Disposition': 'inline; filename=supplier_ledger.pdf'}
    )


@app.route('/settings')
@login_required
def settings():
    return render_template('settings/index.html')

@app.route('/stock-moves')
@login_required
def stock_moves_list():
    db = get_db()
    moves = db.execute("""
        SELECT sm.id, sm.move_type, sm.qty, sm.reference, sm.notes, sm.created_at, i.name as item_name
        FROM stock_moves sm
        JOIN items i ON sm.item_id = i.id
        ORDER BY sm.created_at DESC
    """).fetchall()
    return render_template('stock_moves/list.html', moves=moves)

@app.route('/stock-moves/new', methods=['GET', 'POST'])
@login_required
def new_stock_move():
    db = get_db()
    if request.method == 'POST':
        item_id = request.form.get('item_id', type=int)
        move_type = request.form.get('move_type')
        qty = request.form.get('qty', type=float)
        reference = request.form.get('reference')
        notes = request.form.get('notes')

        if not all([item_id, move_type, qty]):
            flash('Missing required fields', 'danger')
            return redirect(url_for('new_stock_move'))

        db.execute("""
            INSERT INTO stock_moves (item_id, move_type, qty, reference, notes)
            VALUES (?, ?, ?, ?, ?)
        """, (item_id, move_type, qty, reference, notes))
        db.commit()

        flash('Stock move recorded', 'success')
        return redirect(url_for('stock_moves_list'))

    items = db.execute("SELECT id, name FROM items ORDER BY name").fetchall()
    return render_template('stock_moves/form.html', items=items)

@app.route('/delivery-notes')
@login_required
def delivery_notes_list():
    db = get_db()
    notes = db.execute("SELECT * FROM delivery_notes ORDER BY date DESC").fetchall()
    return render_template('delivery_notes/list.html', notes=notes)

@app.route('/delivery-notes/new', methods=['GET', 'POST'])
@login_required
def new_delivery_note():
    db = get_db()
    if request.method == 'POST':
        # ... (implementation for creating a new delivery note)
        pass
    customers = db.execute("SELECT id, name FROM customers ORDER BY name").fetchall()
    return render_template('delivery_notes/new.html', customers=customers)

@app.route('/delivery-notes/<int:id>')
@login_required
def delivery_note_detail(id):
    db = get_db()
    note = db.execute("SELECT * FROM delivery_notes WHERE id = ?", (id,)).fetchone()
    items = db.execute("SELECT * FROM delivery_note_items WHERE delivery_note_id = ?", (id,)).fetchall()
    return render_template('delivery_notes/detail.html', note=note, items=items)

@app.route('/purchase-returns')
@login_required
def purchase_returns_list():
    db = get_db()
    returns = db.execute("SELECT * FROM purchase_returns ORDER BY date DESC").fetchall()
    return render_template('purchase_returns/list.html', returns=returns)

@app.route('/purchase-returns/new', methods=['GET', 'POST'])
@login_required
def new_purchase_return():
    db = get_db()
    if request.method == 'POST':
        # ... (implementation for creating a new purchase return)
        pass
    suppliers = db.execute("SELECT id, name FROM suppliers ORDER BY name").fetchall()
    return render_template('purchase_returns/new.html', suppliers=suppliers)

@app.route('/purchase-returns/<int:id>')
@login_required
def purchase_return_detail(id):
    db = get_db()
    preturn = db.execute("SELECT * FROM purchase_returns WHERE id = ?", (id,)).fetchone()
    items = db.execute("SELECT * FROM purchase_return_items WHERE purchase_return_id = ?", (id,)).fetchall()
    return render_template('purchase_returns/detail.html', preturn=preturn, items=items)

@app.route('/purchase-returns/<int:id>/edit', methods=['GET', 'POST'])
@login_required
def edit_purchase_return(id):
    db = get_db()
    preturn = db.execute("SELECT * FROM purchase_returns WHERE id = ?", (id,)).fetchone()
    if request.method == 'POST':
        # ... (implementation for editing a purchase return)
        pass
    return render_template('purchase_returns/edit.html', preturn=preturn)

@app.route('/print/delivery-note/<int:id>')
@login_required
def print_delivery_note(id):
    db = get_db()
    note = db.execute("SELECT * FROM delivery_notes WHERE id = ?", (id,)).fetchone()
    items = db.execute("SELECT * FROM delivery_note_items WHERE delivery_note_id = ?", (id,)).fetchall()
    rendered_html = render_template('print/delivery_note.html', note=note, items=items)
    return Response(
        HTML(string=rendered_html).write_pdf(),
        mimetype='application/pdf',
        headers={'Content-Disposition': 'inline; filename=delivery_note.pdf'}
    )

@app.route('/print/packing-slip/<int:id>')
@login_required
def print_packing_slip(id):
    db = get_db()
    note = db.execute("SELECT * FROM delivery_notes WHERE id = ?", (id,)).fetchone()
    items = db.execute("SELECT * FROM delivery_note_items WHERE delivery_note_id = ?", (id,)).fetchall()
    rendered_html = render_template('print/packing_slip.html', note=note, items=items)
    return Response(
        HTML(string=rendered_html).write_pdf(),
        mimetype='application/pdf',
        headers={'Content-Disposition': 'inline; filename=packing_slip.pdf'}
    )

@app.route('/print/purchase-return/<int:id>')
@login_required
def print_purchase_return(id):
    db = get_db()
    preturn = db.execute("SELECT * FROM purchase_returns WHERE id = ?", (id,)).fetchone()
    items = db.execute("SELECT * FROM purchase_return_items WHERE purchase_return_id = ?", (id,)).fetchall()
    rendered_html = render_template('print/purchase_return.html', preturn=preturn, items=items)
    return Response(
        HTML(string=rendered_html).write_pdf(),
        mimetype='application/pdf',
        headers={'Content-Disposition': 'inline; filename=purchase_return.pdf'}
    )

@app.route('/print/purchase-return-delivery-note/<int:id>')
@login_required
def print_purchase_return_delivery_note(id):
    db = get_db()
    preturn = db.execute("SELECT * FROM purchase_returns WHERE id = ?", (id,)).fetchone()
    items = db.execute("SELECT * FROM purchase_return_items WHERE purchase_return_id = ?", (id,)).fetchall()
    rendered_html = render_template('print/purchase_return_delivery_note.html', preturn=preturn, items=items)
    return Response(
        HTML(string=rendered_html).write_pdf(),
        mimetype='application/pdf',
        headers={'Content-Disposition': 'inline; filename=purchase_return_delivery_note.pdf'}
    )

@app.route('/print/purchase-return-packing-slip/<int:id>')
@login_required
def print_purchase_return_packing_slip(id):
    db = get_db()
    preturn = db.execute("SELECT * FROM purchase_returns WHERE id = ?", (id,)).fetchone()
    items = db.execute("SELECT * FROM purchase_return_items WHERE purchase_return_id = ?", (id,)).fetchall()
    rendered_html = render_template('print/purchase_return_packing_slip.html', preturn=preturn, items=items)
    return Response(
        HTML(string=rendered_html).write_pdf(),
        mimetype='application/pdf',
        headers={'Content-Disposition': 'inline; filename=purchase_return_packing_slip.pdf'}
    )


@app.route('/reports/outstanding')
@login_required
def report_outstanding():
    db = get_db()
    # ... (implementation for outstanding report)
    return render_template('reports/outstanding.html')

@app.route('/reports/supplier-outstanding')
@login_required
def report_supplier_outstanding():
    db = get_db()
    # ... (implementation for supplier outstanding report)
    return render_template('reports/supplier_outstanding.html')

@app.route('/sales-invoices/<int:id>/add-payment', methods=['GET', 'POST'])
@login_required
def add_payment_to_invoice(id):
    db = get_db()
    invoice = db.execute("SELECT * FROM sales_invoices WHERE id = ?", (id,)).fetchone()
    if request.method == 'POST':
        # ... (implementation for adding payment)
        pass
    return render_template('sales_invoices/add_payment.html', invoice=invoice)

@app.route('/purchase-invoices/<int:id>/add-payment', methods=['GET', 'POST'])
@login_required
def add_payment_to_purchase_invoice(id):
    db = get_db()
    invoice = db.execute("SELECT * FROM purchase_invoices WHERE id = ?", (id,)).fetchone()
    if request.method == 'POST':
        # ... (implementation for adding payment)
        pass
    return render_template('purchase_invoices/add_payment.html', invoice=invoice)


if __name__ == '__main__':
    with app.app_context():
        init_db()
    app.run(debug=True, port=5010)